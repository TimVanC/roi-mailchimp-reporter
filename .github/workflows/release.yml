name: Release
on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  packages: write
  issues: write
  pull-requests: write

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - uses: actions/checkout@v4
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          draft: true
          prerelease: false
          name: ROI Mailchimp Reporter ${{ github.ref_name }}
          generate_release_notes: true

  build-windows:
    needs: create-release
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        
      - name: Install dependencies
        run: |
          npm install
          npm list
        
      - name: Check Rust setup
        run: |
          rustc --version
          cargo --version
          
      - name: Build
        run: |
          echo "Starting Tauri build..."
          npm run tauri build -- --verbose
        env:
          RUST_BACKTRACE: 1
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
          
      - name: List build artifacts
        run: |
          dir src-tauri\target\release\bundle\msi\
          
      - name: Upload Windows Build
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ./src-tauri/target/release/bundle/msi/ROI Mailchimp Reporter_${{ github.ref_name }}_x64_en-US.msi

  build-macos:
    needs: create-release
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-apple-darwin
          components: rustc, cargo
          
      - name: Install Rust dependencies
        run: |
          rustup target add x86_64-apple-darwin
          rustup show
          cargo --version
          
      - name: Install Node dependencies
        run: |
          npm install
          npm list @tauri-apps/cli || true
          
      - name: Install system dependencies
        run: |
          brew install openssl@3
          brew install xcodegen
          brew install jq
          
      - name: Check environment
        run: |
          echo "Rust version:"
          rustc --version
          echo "Cargo version:"
          cargo --version
          echo "Node version:"
          node --version
          echo "NPM version:"
          npm --version
          echo "Xcode version:"
          xcodebuild -version
          echo "Current directory:"
          pwd
          echo "Directory contents:"
          ls -la
          echo "Tauri config:"
          cat src-tauri/tauri.conf.json
          
      - name: Build Frontend
        run: |
          echo "Building frontend..."
          npm run build
          echo "Frontend build complete"
          ls -la dist/
          
      - name: Build Tauri App
        run: |
          echo "Starting Tauri build..."
          cargo install tauri-cli --version "^2.0.0-beta"
          echo "Installed Tauri CLI"
          cd src-tauri
          echo "Building release..."
          cargo build --release --verbose
          echo "Cargo build complete"
          cd ..
          echo "Running Tauri build..."
          npm run tauri build -- --verbose
        env:
          RUST_BACKTRACE: full
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
          MACOSX_DEPLOYMENT_TARGET: "10.13"
          
      - name: Debug Build Output
        if: always()
        run: |
          echo "Checking build output directories..."
          ls -la src-tauri/target/release/ || true
          echo "Checking bundle directory..."
          ls -la src-tauri/target/release/bundle/ || true
          echo "Checking macos directory..."
          ls -la src-tauri/target/release/bundle/macos/ || true
          echo "Checking for build logs..."
          find src-tauri/target -name "*.log" -exec cat {} \;
          echo "Checking for app bundle in alternate locations..."
          find src-tauri/target -name "*.app" -ls || true
          
      - name: Create macOS ZIP
        run: |
          # First check the standard location
          if [ -d "src-tauri/target/release/bundle/macos/ROI Mailchimp Reporter.app" ]; then
            cd src-tauri/target/release/bundle/macos
            echo "Found app bundle in standard location"
          else
            # Try to find the app bundle anywhere in the target directory
            APP_PATH=$(find src-tauri/target -name "*.app" -print -quit)
            if [ -n "$APP_PATH" ]; then
              echo "Found app bundle at: $APP_PATH"
              cd $(dirname "$APP_PATH")
            else
              echo "Error: App bundle not found in any location"
              echo "Contents of target directory:"
              ls -R src-tauri/target/
              exit 1
            fi
          fi
          
          echo "Current directory: $(pwd)"
          echo "Directory contents:"
          ls -la
          
          if [ -d "ROI Mailchimp Reporter.app" ]; then
            echo "Creating ZIP archive..."
            zip -r ROIMailchimpReporter_macOS.zip "ROI Mailchimp Reporter.app"
          else
            echo "Error: App bundle not found in $(pwd)"
            exit 1
          fi
          
      - name: Upload macOS Build
        uses: softprops/action-gh-release@v1
        with:
          files: ./src-tauri/target/release/bundle/macos/ROIMailchimpReporter_macOS.zip

  update-manifest:
    needs: [create-release, build-windows, build-macos]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Install dependencies
        run: npm install
        
      - name: Generate update manifest
        run: node scripts/create-update.js
        
      - name: Commit and push update manifest
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add updates.json
          git commit -m "Update release manifest for ${{ github.ref }}"
          git push 