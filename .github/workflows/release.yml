name: Release
on:
  push:
    tags:
      - 'v*'

jobs:
  create-release:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.get_release.outputs.upload_url }}
      release_id: ${{ steps.get_release.outputs.id }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Get or create release
        id: get_release
        uses: actions/github-script@v6
        with:
          script: |
            try {
              // Try to get existing release
              const releases = await github.rest.repos.listReleases({
                owner: context.repo.owner,
                repo: context.repo.repo
              });
              
              const tagName = context.ref.replace('refs/tags/', '');
              const existingRelease = releases.data.find(r => r.tag_name === tagName);
              
              if (existingRelease) {
                // Delete existing release
                await github.rest.repos.deleteRelease({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  release_id: existingRelease.id
                });
              }
              
              // Create new release
              const { data: newRelease } = await github.rest.repos.createRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag_name: tagName,
                name: `Release ${tagName}`,
                draft: true
              });
              
              return {
                id: newRelease.id.toString(),
                upload_url: newRelease.upload_url
              };
            } catch (error) {
              core.setFailed(`Release creation failed: ${error.message}`);
              throw error;
            }

  build-and-upload:
    needs: create-release
    permissions:
      contents: write
    strategy:
      matrix:
        platform: [windows-latest, macos-latest]
        include:
          - platform: windows-latest
            output_path: target/release/bundle/msi/*.msi
            asset_type: application/x-msi
          - platform: macos-latest
            output_path: target/release/bundle/dmg/*.dmg
            asset_type: application/x-apple-diskimage
    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install dependencies
        run: npm install

      - name: Build the app
        run: npm run tauri build

      - name: Generate latest.json (Windows only)
        if: matrix.platform == 'windows-latest'
        shell: pwsh
        run: |
          $version = (Get-Content -Raw -Path package.json | ConvertFrom-Json).version
          $msiName = "ROI.Mailchimp.Reporter_${version}_x64_en-US.msi"
          $latestJson = @{
            version = $version
            notes = "Release $version"
            pub_date = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
            platforms = @{
              "windows-x86_64" = @{
                signature = "dW50cnVzdGVkIGNvbW1lbnQ6IG1pbmlzaWduIHB1YmxpYyBrZXk6IDhFOUVGMTUyRjg4RTRDREQKUldUZFRJNzRVdkdlanNCZTUrT1ZyTWk3YXViQUNzWGVTRXhmWDRYdWx2MUMyTmF1Skp4UWs5ZnUK"
                url = "https://github.com/TimVanC/roi-mailchimp-reporter/releases/download/v${version}/${msiName}"
              }
            }
          }
          $latestJson | ConvertTo-Json -Depth 10 | Out-File -FilePath latest.json

      - name: Find MSI file
        if: matrix.platform == 'windows-latest'
        shell: pwsh
        run: |
          $msiFile = Get-ChildItem -Path "src-tauri/target/release/bundle/msi/*.msi" | Select-Object -First 1
          if (-not $msiFile) {
            Write-Error "No MSI file found"
            exit 1
          }
          echo "MSI_PATH=$($msiFile.FullName)" >> $env:GITHUB_ENV
          echo "Found MSI at: $($msiFile.FullName)"

      - name: Find DMG file
        if: matrix.platform == 'macos-latest'
        shell: bash
        run: |
          DMG_FILE=$(ls src-tauri/target/release/bundle/dmg/*.dmg 2>/dev/null | head -n 1)
          if [ -z "$DMG_FILE" ]; then
            echo "No DMG file found"
            exit 1
          fi
          echo "DMG_PATH=$DMG_FILE" >> $GITHUB_ENV
          echo "Found DMG at: $DMG_FILE"

      - name: Delete existing assets
        if: matrix.platform == 'windows-latest'
        uses: actions/github-script@v6
        with:
          script: |
            const release = await github.rest.repos.getRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: ${{ needs.create-release.outputs.release_id }}
            });
            
            for (const asset of release.data.assets) {
              if (asset.name === 'latest.json' || asset.name.endsWith('.msi')) {
                await github.rest.repos.deleteReleaseAsset({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  asset_id: asset.id
                });
              }
            }

      - name: Delete existing DMG assets
        if: matrix.platform == 'macos-latest'
        uses: actions/github-script@v6
        with:
          script: |
            const release = await github.rest.repos.getRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: ${{ needs.create-release.outputs.release_id }}
            });
            
            for (const asset of release.data.assets) {
              if (asset.name.endsWith('.dmg')) {
                await github.rest.repos.deleteReleaseAsset({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  asset_id: asset.id
                });
              }
            }

      - name: Upload Assets
        uses: actions/github-script@v6
        env:
          MSI_PATH: ${{ env.MSI_PATH }}
          DMG_PATH: ${{ env.DMG_PATH }}
        with:
          script: |
            const fs = require('fs').promises;
            const path = require('path');
            
            async function uploadAsset(releaseId, assetPath, contentType) {
              if (!assetPath) {
                console.log(`No asset path provided for ${contentType}`);
                return;
              }
              
              try {
                const data = await fs.readFile(assetPath);
                const name = path.basename(assetPath);
                
                await github.rest.repos.uploadReleaseAsset({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  release_id: releaseId,
                  name: name,
                  data: data,
                  headers: {
                    'content-type': contentType,
                    'content-length': data.length
                  }
                });
                console.log(`Successfully uploaded ${name}`);
              } catch (error) {
                console.error(`Failed to upload ${assetPath}: ${error}`);
                throw error;
              }
            }
            
            try {
              const platform = '${{ matrix.platform }}';
              const releaseId = '${{ needs.create-release.outputs.release_id }}';
              const tagName = context.ref.replace('refs/tags/', '');
              
              if (platform === 'windows-latest') {
                // Upload MSI
                const msiPath = process.env.MSI_PATH;
                console.log(`Attempting to upload MSI from: ${msiPath}`);
                await uploadAsset(releaseId, msiPath, 'application/x-msi');
                
                // Upload latest.json
                const latestJsonPath = 'latest.json';
                if (await fs.access(latestJsonPath).then(() => true).catch(() => false)) {
                  console.log('Found latest.json, uploading...');
                  await uploadAsset(releaseId, latestJsonPath, 'application/json');
                }
              } else if (platform === 'macos-latest') {
                // Upload DMG
                const dmgPath = process.env.DMG_PATH;
                console.log(`Attempting to upload DMG from: ${dmgPath}`);
                await uploadAsset(releaseId, dmgPath, 'application/x-apple-diskimage');
              }
            } catch (error) {
              console.error('Failed to upload assets:', error);
              core.setFailed(error.message);
            }

  publish-release:
    needs: [create-release, build-and-upload]
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - name: Publish Release
        uses: actions/github-script@v6
        with:
          script: |
            await github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: ${{ needs.create-release.outputs.release_id }},
              draft: false
            }); 