name: Release
on:
  push:
    tags:
      - 'v*'

jobs:
  create-release:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_id: ${{ steps.create_release.outputs.release_id }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Create Release
        id: create_release
        uses: actions/github-script@v6
        with:
          script: |
            try {
              // Try to get existing release
              const releases = await github.rest.repos.listReleases({
                owner: context.repo.owner,
                repo: context.repo.repo
              });
              
              const tagName = context.ref.replace('refs/tags/', '');
              console.log('Creating release for tag:', tagName);
              
              const existingRelease = releases.data.find(r => r.tag_name === tagName);
              
              if (existingRelease) {
                console.log('Found existing release, deleting it first...');
                // Delete existing release
                await github.rest.repos.deleteRelease({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  release_id: existingRelease.id
                });
              }
              
              console.log('Creating new release...');
              // Create new release
              const release = await github.rest.repos.createRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag_name: tagName,
                name: `Release ${tagName}`,
                draft: true
              });
              
              console.log('Release created with ID:', release.data.id);
              core.setOutput('release_id', release.data.id.toString());
              core.setOutput('upload_url', release.data.upload_url);
              
              return {
                release_id: release.data.id.toString(),
                upload_url: release.data.upload_url
              };
            } catch (error) {
              console.error('Release creation failed:', error);
              core.setFailed(`Release creation failed: ${error.message}`);
              throw error;
            }

  build-tauri:
    needs: create-release
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest, windows-latest]

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable

      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-20.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf

      - name: install frontend dependencies
        run: npm install

      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
        with:
          releaseId: ${{ needs.create-release.outputs.release_id }}

  publish-release:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    needs: [create-release, build-tauri]

    steps:
      - name: publish release
        id: publish-release
        uses: actions/github-script@v6
        env:
          release_id: ${{ needs.create-release.outputs.release_id }}
        with:
          script: |
            console.log('Publishing release with ID:', process.env.release_id);
            if (!process.env.release_id) {
              throw new Error('No release ID provided');
            }
            
            try {
              const result = await github.rest.repos.updateRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: parseInt(process.env.release_id, 10),
                draft: false,
                prerelease: false
              });
              console.log('Release published successfully:', result.data.html_url);
            } catch (error) {
              console.error('Failed to publish release:', error);
              core.setFailed(error.message);
              throw error;
            } 